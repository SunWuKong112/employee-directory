{"version":3,"sources":["logo.svg","components/NavTabs.js","api/EmployeeContext.js","api/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavTabs","props","className","href","onClick","handlePageChange","EmployeeContext","React","createContext","display","msg","theme","axios","get","Search","searchString","useInput","useState","emp","setState","empFilter","setFillState","useEffect","API","then","res","data","results","Provider","value","eventBind","filter","empL","query","gender","includes","name","first","last","class","scope","map","obj","index","key","email","JSON","stringify","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,mHCiB5BC,MAbf,SAAiBC,GACZ,OACK,wBAAIC,UAAU,gBACT,wBAAIA,UAAU,YACT,uBAAGC,KAAK,QAAQC,QAAS,kBAAIH,EAAMI,iBAAiB,UAApD,SAEL,wBAAIH,UAAU,YACT,uBAAGC,KAAK,SAASC,QAAS,kBAAIH,EAAMI,iBAAiB,UAAUH,UAAU,YAAzE,Y,OCDLI,EAPSC,IAAMC,cAAc,CAC1CC,SAAS,EACTC,IAAK,gBACLC,MAAO,GACPP,QAAS,e,iBCJI,EACC,WACZ,OAAOQ,IAAMC,IAAI,kD,QCwDNC,MAjDf,WACK,IAAMC,EAAeC,YAAS,IADlB,EAGWC,mBAAS,IAHpB,mBAGLC,EAHK,KAGDC,EAHC,OAIqBF,mBAAS,IAJ9B,mBAILG,EAJK,KAIKC,EAJL,KAqBZ,OAhBAC,qBAAU,WACLC,IAAmBC,MAAK,SAAAC,GACnBN,EAASM,EAAIC,KAAKC,SAClBN,EAAaI,EAAIC,KAAKC,cAE9B,IAYG,kBAAC,EAAgBC,SAAjB,CAA0BC,MAAOT,GAC5B,6BAAcL,EAAae,WADhC,IACuD,4BAAQ1B,QAZpE,WACKiB,EAAaH,EAAIa,QAAO,SAAAC,GACnB,IAAMC,EAAOlB,EAAac,MAC1B,SAAGG,EAAKE,OAAOC,SAASF,IAASD,EAAKI,KAAKC,MAAMF,SAASF,IAAUD,EAAKI,KAAKE,KAAKH,SAASF,UAS1C,UAClD,2BAAOM,MAAM,SACR,+BACK,4BACK,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAGV,+BACMpB,EAAUqB,KAAI,SAACC,EAAIC,GACf,OAAO,wBAAIC,IAAG,cAASD,IACb,wBAAIH,MAAM,OAAOG,GACjB,4BAAKD,EAAIN,KAAKC,OACd,4BAAKK,EAAIN,KAAKE,MACd,4BAAKI,EAAIG,aAKlC,4CAAkBC,KAAKC,UAAU3B,MCrCjC4B,MAXf,WAEE,OADAC,SAASC,MAAQ,qBAEb,6BACE,kBAAC,EAAD,MAEE,kBAAC,EAAD,QCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.988e6d07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26ef1cbc.svg\";","import React from 'react';\r\n// import {Link, useLocation} from \"react-router-dom\";\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NavTabs(props){\r\n     return(\r\n          <ul className=\"nav nav-tabs\">\r\n               <li className=\"nav-item\">\r\n                    <a href=\"#home\" onClick={()=>props.handlePageChange(\"Home\")}>Home</a>\r\n               </li>\r\n               <li className=\"nav-item\">\r\n                    <a href=\"#about\" onClick={()=>props.handlePageChange(\"About\")} className=\"nav-link\">About</a>\r\n               </li>\r\n          </ul>\r\n     )\r\n}\r\n\r\nexport default NavTabs;","import React from \"react\";\r\n// default context object with properties corresponding to Provider values\r\n\r\nconst EmployeeContext = React.createContext({\r\n  display: false,\r\n  msg: \"default value\",\r\n  theme: \"\",\r\n  onClick: () => undefined\r\n});\r\n\r\nexport default EmployeeContext;","import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the random user API\r\nexport default {\r\n  getEmployees: function(){\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n  }\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport EmployeeContext from \"../../api/EmployeeContext\";\r\nimport API from \"../../api\";\r\nimport {\r\n     useInput\r\n     // useBoolean,\r\n     // useNumber,\r\n     // useArray,\r\n     // useOnMount,\r\n     // useOnUnmount\r\n   } from \"react-hanger\";\r\n\r\nfunction Search(){\r\n     const searchString = useInput(\"\");\r\n\r\n     const [emp,setState] = useState([]);\r\n     const [empFilter,setFillState] = useState([]);\r\n     useEffect(()=>{\r\n          API.getEmployees().then(res=>{\r\n               setState(res.data.results);\r\n               setFillState(res.data.results);\r\n          });\r\n     },[]);\r\n     function filterEmployees(){\r\n          setFillState(emp.filter(empL=>{\r\n               const query= searchString.value;\r\n               if(empL.gender.includes(query)|| empL.name.first.includes(query) || empL.name.last.includes(query)){\r\n                    return true;\r\n               }else{\r\n                    return false;\r\n               }\r\n          }));\r\n     }\r\n     return(\r\n          <EmployeeContext.Provider value={empFilter}>\r\n               <textarea {...searchString.eventBind}></textarea> <button onClick={filterEmployees}>Search</button>\r\n               <table class=\"table\">\r\n                    <thead>\r\n                         <tr>\r\n                              <th scope=\"col\">#</th>\r\n                              <th scope=\"col\">First</th>\r\n                              <th scope=\"col\">Last</th>\r\n                              <th scope=\"col\">Email</th>\r\n                         </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                         {empFilter.map((obj,index) =>{\r\n                              return <tr key={`item${index}`}>\r\n                                        <th scope=\"row\">{index}</th>\r\n                                        <td>{obj.name.first}</td>\r\n                                        <td>{obj.name.last}</td>\r\n                                        <td>{obj.email}</td>\r\n                                     </tr>\r\n                              })}\r\n                    </tbody>\r\n               </table>\r\n               <p>API RESPONSE: {JSON.stringify(empFilter)}</p>\r\n          </EmployeeContext.Provider>\r\n     );\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport NavTabs from './components/NavTabs';\nimport Search from \"./components/Search\";\n\n\nfunction App(){\n  document.title = \"Wikipedia Searcher\";\n  return (\n      <div>\n        <NavTabs />\n          {/* <Route exact path=\"/\" component={Search} /> */}\n          <Search />\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}